"""
Tests for the Heart Disease Predictor application
"""
import unittest
import sys
import os
from pathlib import Path

# Add the project root to the path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))


class TestDataset(unittest.TestCase):
    """Test dataset loading and validation"""
    
    def test_dataset_exists(self):
        """Test that the dataset file exists"""
        dataset_path = project_root / 'data' / 'heart.csv'
        self.assertTrue(dataset_path.exists(), "Dataset file should exist")
    
    def test_dataset_structure(self):
        """Test that the dataset has correct structure"""
        import pandas as pd
        dataset_path = project_root / 'data' / 'heart.csv'
        df = pd.read_csv(dataset_path)
        
        # Check number of columns
        self.assertEqual(len(df.columns), 14, "Dataset should have 14 columns")
        
        # Check for target column
        self.assertIn('target', df.columns, "Dataset should have 'target' column")
        
        # Check number of samples
        self.assertGreater(len(df), 0, "Dataset should not be empty")


class TestModels(unittest.TestCase):
    """Test model functionality"""
    
    def test_models_can_be_loaded(self):
        """Test that models can be loaded if they exist"""
        import joblib
        
        models_dir = project_root / 'models'
        model_files = [
            'logistic_regression_model.pkl',
            'random_forest_model.pkl',
            'xgboost_model.pkl'
        ]
        
        # Only test if models exist (they're generated by running the notebook)
        for model_file in model_files:
            model_path = models_dir / model_file
            if model_path.exists():
                try:
                    model = joblib.load(model_path)
                    self.assertIsNotNone(model, f"{model_file} should load successfully")
                except Exception as e:
                    self.fail(f"Failed to load {model_file}: {str(e)}")


class TestStreamlitApp(unittest.TestCase):
    """Test Streamlit application"""
    
    def test_app_imports(self):
        """Test that the Streamlit app can be imported"""
        sys.path.insert(0, str(project_root / 'app'))
        try:
            import streamlit_app
            self.assertTrue(True, "App should import successfully")
        except ImportError as e:
            self.fail(f"Failed to import streamlit_app: {str(e)}")


if __name__ == '__main__':
    unittest.main()
